{"remainingRequest":"/home/rido/code/vue-10-apps/node_modules/babel-loader/lib/index.js!/home/rido/code/vue-10-apps/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/rido/code/vue-10-apps/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/rido/code/vue-10-apps/src/pages/Chat.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/rido/code/vue-10-apps/src/pages/Chat.vue","mtime":1611728242646},{"path":"/home/rido/code/vue-10-apps/node_modules/cache-loader/dist/cjs.js","mtime":1610270851788},{"path":"/home/rido/code/vue-10-apps/node_modules/babel-loader/lib/index.js","mtime":1610188258325},{"path":"/home/rido/code/vue-10-apps/node_modules/cache-loader/dist/cjs.js","mtime":1610270851788},{"path":"/home/rido/code/vue-10-apps/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js","mtime":1610270854965}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL2hvbWUvcmlkby9jb2RlL3Z1ZS0xMC1hcHBzL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0IHsgY29tcHV0ZWQsIG9uTW91bnRlZCwgcmVhY3RpdmUsIHJlZiB9IGZyb20gInZ1ZSI7CmltcG9ydCBmaXJlYmFzZSBmcm9tICIuLi91dGlsaXRpZXMvZmlyZWJhc2UiOwppbXBvcnQgeyB1c2VTdG9yZSB9IGZyb20gInZ1ZXgiOwpleHBvcnQgZGVmYXVsdCB7CiAgc2V0dXA6IGZ1bmN0aW9uIHNldHVwKCkgewogICAgdmFyIGZvY3VzUmVmID0gcmVmKCIiKTsKICAgIHZhciBzdGF0ZSA9IHJlYWN0aXZlKHsKICAgICAgY2hhdHM6IHt9LAogICAgICBtZXNzYWdlOiAiIgogICAgfSk7IC8vIGdldCB1c2VyIGRhdGEgaWQgZnJvbSBzdG9yZSAodnVleCkKCiAgICB2YXIgc3RvcmUgPSB1c2VTdG9yZSgpOwogICAgdmFyIHVzZXJJZCA9IGNvbXB1dGVkKGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIHN0b3JlLnN0YXRlLmF1dGhVc2VyLnVpZDsKICAgIH0pOwogICAgb25Nb3VudGVkKCAvKiNfX1BVUkVfXyovX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICB2YXIgcmVzcG9uc2U7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAvLyBmb2N1cyBpbnB1dCB0ZXh0CiAgICAgICAgICAgICAgZm9jdXNSZWYudmFsdWUuZm9jdXMoKTsgLy8gZm9yIGdldCBkYXRhIGNoYXQgZnJvbSByZWFsdGltZSBkYXRhYmFzZQoKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgICByZXR1cm4gZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoImNoYXRzIikub25jZSgidmFsdWUiKTsKCiAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgc3RhdGUuY2hhdHMgPSByZXNwb25zZS52YWwoKTsgLy8gd2hhdGNpbmcgZm9yIGNoYW5nZXMgcmVhbHRpbWUgZGF0YWJhc2UKCiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDc7CiAgICAgICAgICAgICAgcmV0dXJuIGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCJjaGF0cyIpLm9uKCJ2YWx1ZSIsIGZ1bmN0aW9uIChzbmFwc2hvdCkgewogICAgICAgICAgICAgICAgc3RhdGUuY2hhdHMgPSBzbmFwc2hvdC52YWwoKTsKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZSk7CiAgICB9KSkpOyAvLyBmdW5jdGlvbiBmb3IgcHVzaC9hZGQgbWVzc2FnZSB0byBmaXJlYmFzZSByZWFsdGltZSBkYXRhYmFzZQoKICAgIHZhciBhZGRNZXNzYWdlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgICAgdmFyIF9yZWYyID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgICB2YXIgbmV3Q2hhdDsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCJjaGF0cyIpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICBuZXdDaGF0ID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgICBuZXdDaGF0LnB1c2goKS5zZXQoewogICAgICAgICAgICAgICAgICB1c2VySWQ6IHVzZXJJZC52YWx1ZSwKICAgICAgICAgICAgICAgICAgbWVzc2FnZTogc3RhdGUubWVzc2FnZQogICAgICAgICAgICAgICAgfSk7IC8vIGNsZWFyIHRleHQgZmllbGQgYWZ0ZXIgZG9uZSBwdXNoIG1lc3NhZ2UKCiAgICAgICAgICAgICAgICBzdGF0ZS5tZXNzYWdlID0gIiI7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMik7CiAgICAgIH0pKTsKCiAgICAgIHJldHVybiBmdW5jdGlvbiBhZGRNZXNzYWdlKCkgewogICAgICAgIHJldHVybiBfcmVmMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9OwogICAgfSgpOwoKICAgIHJldHVybiB7CiAgICAgIHN0YXRlOiBzdGF0ZSwKICAgICAgYWRkTWVzc2FnZTogYWRkTWVzc2FnZSwKICAgICAgZm9jdXNSZWY6IGZvY3VzUmVmLAogICAgICB1c2VySWQ6IHVzZXJJZAogICAgfTsKICB9Cn07"},{"version":3,"sources":["/home/rido/code/vue-10-apps/src/pages/Chat.vue"],"names":[],"mappings":";;AAsCA,SAAS,QAAT,EAAmB,SAAnB,EAA8B,QAA9B,EAAwC,GAAxC,QAAmD,KAAnD;AACA,OAAO,QAAP,MAAqB,uBAArB;AACA,SAAS,QAAT,QAAyB,MAAzB;AACA,eAAe;AACX,EAAA,KADW,mBACH;AACJ,QAAM,QAAO,GAAI,GAAG,CAAC,EAAD,CAApB;AACA,QAAM,KAAI,GAAI,QAAQ,CAAC;AACnB,MAAA,KAAK,EAAE,EADY;AAEnB,MAAA,OAAO,EAAE;AAFU,KAAD,CAAtB,CAFI,CAOJ;;AACA,QAAM,KAAI,GAAI,QAAQ,EAAtB;AACA,QAAM,MAAK,GAAI,QAAQ,CAAC;AAAA,aAAM,KAAK,CAAC,KAAN,CAAY,QAAZ,CAAqB,GAA3B;AAAA,KAAD,CAAvB;AAEA,IAAA,SAAS,uEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AACN;AACA,cAAA,QAAQ,CAAC,KAAT,CAAe,KAAf,GAFM,CAIN;;AAJM;AAAA,qBAKiB,QAAO,CACzB,QADkB,GAElB,GAFkB,CAEd,OAFc,EAGlB,IAHkB,CAGb,OAHa,CALjB;;AAAA;AAKA,cAAA,QALA;AASN,cAAA,KAAK,CAAC,KAAN,GAAc,QAAQ,CAAC,GAAT,EAAd,CATM,CAWN;;AAXM;AAAA,qBAYA,QAAO,CACR,QADC,GAED,GAFC,CAEG,OAFH,EAGD,EAHC,CAGE,OAHF,EAGW,UAAC,QAAD,EAAc;AACvB,gBAAA,KAAK,CAAC,KAAN,GAAc,QAAQ,CAAC,GAAT,EAAd;AACH,eALC,CAZA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD,GAAT,CAXI,CA+BJ;;AACA,QAAM,UAAS;AAAA,0EAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACO,QAAQ,CAAC,QAAT,GAAoB,GAApB,CAAwB,OAAxB,CADP;;AAAA;AACT,gBAAA,OADS;AAEf,gBAAA,OAAO,CAAC,IAAR,GAAe,GAAf,CAAmB;AACf,kBAAA,MAAM,EAAE,MAAM,CAAC,KADA;AAEf,kBAAA,OAAO,EAAE,KAAK,CAAC;AAFA,iBAAnB,EAFe,CAMf;;AACA,gBAAA,KAAK,CAAC,OAAN,GAAgB,EAAhB;;AAPe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAJ;;AAAA,sBAAT,UAAS;AAAA;AAAA;AAAA,OAAf;;AAUA,WAAO;AAAE,MAAA,KAAK,EAAL,KAAF;AAAS,MAAA,UAAU,EAAV,UAAT;AAAqB,MAAA,QAAQ,EAAR,QAArB;AAA+B,MAAA,MAAK,EAAL;AAA/B,KAAP;AACH;AA5CU,CAAf","sourcesContent":["<template>\n    <div class=\"flex flex-col w-full my-4\">\n        <div class=\"m-auto\">\n            <h1 class=\"text-2xl text-center my-2\">Realtime Chat vue</h1>\n            <div class=\"border rounded bg-white w-96\">\n                <div class=\"h-96 p-4 flex flex-col space-y-4 overflow-y-scroll\">\n                    <div\n                        v-for=\"chat in state.chats\"\n                        :key=\"chat.message\"\n                        class=\"w-full\"\n                        :class=\"chat.userId === userId ? 'text-right' : ''\"\n                    >\n                        <span\n                            class=\"p-2 rounded-lg text-white shadow\"\n                            :class=\"\n                                chat.userId === userId\n                                    ? 'bg-green-500'\n                                    : 'bg-blue-500'\n                            \"\n                            >{{ chat.message }}</span\n                        >\n                    </div>\n                </div>\n                <div class=\"h-8 p-2\">\n                    <input\n                        class=\"w-full p-2 border rounded-lg shadow focus:outline-none focus:ring focus:ring-blue-400 focus:ring-offset-2\"\n                        placeholder=\"Type message...\"\n                        ref=\"focusRef\"\n                        v-model=\"state.message\"\n                        @keydown.enter=\"addMessage\"\n                    />\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { computed, onMounted, reactive, ref } from \"vue\";\nimport firebase from \"../utilities/firebase\";\nimport { useStore } from \"vuex\";\nexport default {\n    setup() {\n        const focusRef = ref(\"\");\n        const state = reactive({\n            chats: {},\n            message: \"\",\n        });\n\n        // get user data id from store (vuex)\n        const store = useStore();\n        const userId = computed(() => store.state.authUser.uid);\n\n        onMounted(async () => {\n            // focus input text\n            focusRef.value.focus();\n\n            // for get data chat from realtime database\n            const response = await firebase\n                .database()\n                .ref(\"chats\")\n                .once(\"value\");\n            state.chats = response.val();\n\n            // whatcing for changes realtime database\n            await firebase\n                .database()\n                .ref(\"chats\")\n                .on(\"value\", (snapshot) => {\n                    state.chats = snapshot.val();\n                });\n        });\n\n        // function for push/add message to firebase realtime database\n        const addMessage = async () => {\n            const newChat = await firebase.database().ref(\"chats\");\n            newChat.push().set({\n                userId: userId.value,\n                message: state.message,\n            });\n            // clear text field after done push message\n            state.message = \"\";\n        };\n\n        return { state, addMessage, focusRef, userId };\n    },\n};\n</script>\n\n<style>\n</style>"],"sourceRoot":""}]}